===================
Blueshift Internals
===================
(*for internal use only*)

Main Modules
------------
* Algorithm

    * algorithm: Implements the algorithm (the big while loop and APIs). Algorithm is also a state-machine.
    * context: Maintains interfaces to everything algorithm needs (e.g. broker, data source, accounts etc.)
    * api: all the APIs user needs to import and use. Dynamically created.
    
* Assets

    * _assets: Defines structure definitions of various asset types
    * assets: Interface to asset meta-data (*asset_finder*). This and above can be hived off in to a different package.
    
* Data

    * dataportal: Interface to data-storage. This should be hived-off in to a different package
    * interface: Defines generic and particular interfaces to various databases (under development)
    * ingestors: Defines generic and particular interfaces to ingest processes
    * restdata: derives from *dataportal* and defines interface for REST API based data query
    
* Execution

    * broker: broker defines broker execution interface
    * backtest: An implementation for back-tester (to be finalized after database implementation)
    * _clock: Defines the base event generator (clock tick) and implements one for backtest.
    * clock: Inherits from above and implement a real-time clock with tick correction.
    * authentication: Defines interface for (execution) platform authentication
    
* Trades

    * _order: Defines structure and handling of orders. Orders are generated by algorithm API and sent to broker
    * _trade: Structure/ handling of trades. Trades are generated by broker on the back of an order.
    * _position: Structure and handling of positions. Generated as a consequence of a trade.
    
* Blotter

    * _account: Structure/ handling of accounts. Accounts are affected by change in position, or capital action.
    * _perf : Performance tracker (under development)
    * events: Templates for events (e.g. corporate actions or capital action)
    * blotter: Implements a transaction tracker and a Blotter. Interacts with algorithm at a defined period and at every order
    
* Alerts

    * logging: Defines some custom loggers
    * message brokers: Defines some custom PUB/SUB classes over ZMQ
    * alert manager: A wrapper for all communication needs of the algorithm.
    
* Utils

    * calendars: Defines trading calendar objects and functions
    * brokers: Implements individual platform connectivity. This includes four components - authentication, asset query, price query and trading API
    * run: Defines a trading environment wrapper and implements main entry points for backtest and live runs.
    
* Config

    * config: A wrapper for reading and constructing configuration details
    * defaults: Defines default settings
    
